<chapter id="linestack">
	<title>Line stacks</title>

<para>Line stacks are structures that contain a bunch of line structs. They 
are used for various things inside ctrlproxy, but usually for replication. 
</para>

<para>You can do a few things with line stacks: add lines to them, retrieve 
all lines, send all lines to a <parameter>transport_context</parameter> and 
clear the stack.</para>

<para>linestack has various implementations (backends), each with their 
	own advantages and disadvantages. </para>

<sect1><title>General functions</title>

	<sect2><title>linestack_new</title>
		
	<programlisting>
		struct linestack_context *linestack_new(char *name, char *args);</title>
	</programlisting>

	<para>Create a new linestack_context based on the backend with the specified 
		name and the specified arguments. If name is NULL, the first avallable 
	backend will be used.</para>
</sect2>

<sect2><title>linestack_get_linked_list</title>

	<programlisting>
		GSList *linestack_get_linked_list(struct linestack_context *);
	</programlisting>

	<para>Retrieves a single linked listed with all lines in the specified 
		linestack_context.</para>
</sect2>

<sect2>
	<title>linestack_send</title>

<programlisting>
void linestack_send(struct linestack_context *, struct transport_context *);
</programlisting>

<para>Send all lines in the specified linestack_contact using the specified
	transport_context.</para>

</sect2>

<sect2>
	<title>linestack_destroy</title>

<programlisting>
gboolean linestack_destroy(struct linestack_context *);
</programlisting>

<para>Free all memory associated with the specified linestack_context and/or close any resources the linestack_context is using.</para>

</sect2>

<sect2><title>linestack_clear</title>

	<programlisting>
		gboolean linestack_clear(struct linestack_context *);
	</programlisting>

	<para>
		Remove all lines from the specified linestack_context.
	</para>
</sect2>

<sect2><title>linstack_add_line</title>
	<programlisting>
gboolean linestack_add_line(struct linestack_context *, struct line *);
	</programlisting>

	<para>Add the specified line struct to the specified linestack_context.</para>
</sect2>

<sect2><title>linestack_add_line_list</title>

<programlisting>
	gboolean linestack_add_line_list(struct linestack_context *, GSList *);
</programlisting>

<para>
	Add all the line structs in the specified linked list to the specified 
	linestack_context.</para>
</sect2>

</sect1>

<sect1><title>Writing your own linestack backend</title>

<programlisting>
/* linestack.c */
struct linestack_context;
struct linestack {
	char *name;
	gboolean (*init) (struct linestack_context *, char *args);
	gboolean (*clear) (struct linestack_context *);
	gboolean (*add_line) (struct linestack_context *, struct line *);
	GSList *(*get_linked_list) (struct linestack_context *);
	void (*send) (struct linestack_context *, struct transport_context *);
	gboolean (*destroy) (struct linestack_context *);
	};

struct linestack_context {
	struct linestack *functions;
	void *data;
};
</programlisting>

<sect2><title>linestack functions a backend should provide</title>

<para>To add a linestack backend, a module should fill in a linestack 
	struct and register that. A linestack struct contains the following 
	fields: </para>

<variablelist>
	<varlistentry><term>name</term>
		<listitem><para>Name of the backend. Should _NOT_ be NULL.</para></listitem>
	</varlistentry>

	<varlistentry><term>init</term>
		<listitem><para>Should point to a function that will be called 
				after a transport_context of this type has been created. The optional argument will contain some configuration details specified by the user (for example, a file name for a file-based linestack backend). The argument may be NULL.</para></listitem>
	</varlistentry>

	<varlistentry><term>clear</term>
		<listitem><para>Should point to a function that will remove all 
				lines from the specified linestack_context.</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>add_line</term>
		<listitem><para>Should point to a function that will add the specified 
				line struct to the specified linestack_context.</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>get_linked_list</term>
		<listitem><para>Should point to a function that will return a 
				single linked list with all the current lines in the specified
				linestack_context.</para></listitem>
	</varlistentry>

	<varlistentry><term>send</term>
		<listitem><para>Should point to a function that will sned all 
				the lines in the specified linestack_context to the specified 
				transport_context. If set to NULL, a dummy function will be 
				used that sends all lines returned by get_linked_list() to 
				the transport_context.</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>destroy</term>
		<listitem><para>Should point to a function that frees all resources 
			that are in used by the specified linestack_context. May be NULL, 
			if no resources need to be freed.</para></listitem>
	</varlistentry>
</variablelist>

<sect2><title>register_linestack</title>

<programlisting>
void register_linestack(struct linestack *);
</programlisting>

<para>Register a new linestack backend (ie, make it available, not necessarily use it), described by the specified linestack 
	struct.</para>

</sect2>

<sect2><title>unregister_linestack</title>

<programlisting>
void unregister_linestack(struct linestack *);
</programlisting>

<para>Register a new linestack backend (ie, make it available, not necessarily use it), described by the specified linestack 
	struct.</para>
</sect2>

</sect1>

</chapter>
